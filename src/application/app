#!/usr/bin/env python3
import sys
from flask import Flask, jsonify, abort, request, make_response, session, url_for
from flask_restful import reqparse, Resource, Api
from flask_session import Session
import json
from ldap3 import Server, Connection, ALL
from ldap3.core.exceptions import *
import settings # Our server and db settings, stored in settings.py

app = Flask(__name__)
api = Api(app)
# Set Server-side session config: Save sessions in the local app directory.
app.secret_key = settings.SECRET_KEY
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_COOKIE_NAME'] = 'peanutButter'
app.config['SESSION_COOKIE_DOMAIN'] = settings.APP_HOST
Session(app)

import pymysql.cursors
import ssl
import cgitb
import cgi
cgitb.enable()

####################################################################################
#
# Error handlers
#
@app.errorhandler(400) # decorators to add to 400 response
def not_found(error):
	return make_response(jsonify( { "status": "Bad request" } ), 400)

@app.errorhandler(404) # decorators to add to 404 response
def not_found(error):
	return make_response(jsonify( { "status": "Resource not found" } ), 404)

####################################################################################
#
# Static Endpoints for humans
#
class Root(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('index.html')


class Developer(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('developer.html')


####################################################################################
#

class SignIn(Resource):
	#
	# Login, start a session and set/return a session cookie
	#
	# Example curl command:
	# curl -i -H "Content-Type: application/json" -X POST -d '{"username": "Casper", "password": "cr*ap"}'
	#  	-c cookie-jar -k https://cs3103.cs.unb.ca:43075/signin
	#
	def post(self):
		if not request.json:
			abort(400) # bad request
		# Parse the json
		parser = reqparse.RequestParser()
		try:
			# Check for required attributes in json document, create a dictionary
			parser.add_argument('username', type=str, required=True)
			parser.add_argument('password', type=str, required=True)
			request_params = parser.parse_args()
		except:
			abort(400) # bad request

		# Already logged in
		if request_params['username'] in session:
			response = {'status': 'success'}
			responseCode = 200
		else:
			try:
				ldapServer = Server(host=settings.LDAP_HOST)
				ldapConnection = Connection(ldapServer,
					raise_exceptions=True,
					user='uid='+request_params['username']+', ou=People,ou=fcs,o=unb',
					password = request_params['password'])
				ldapConnection.open()
				ldapConnection.start_tls()
				ldapConnection.bind()
				# At this point we have sucessfully authenticated.
				session['username'] = request_params['username']
				response = {'status': 'success' }
				responseCode = 201
			except LDAPException:
				response = {'status': 'Access denied'}
				responseCode = 403
			finally:
				ldapConnection.unbind()

		return make_response(jsonify(response), responseCode)

	# GET: Check for a login
	#
	# Example curl command:
	# curl -i -H "Content-Type: application/json" -X GET -b cookie-jar -k
	#	https://cs3103.cs.unb.ca:43075/signin
	def get(self):
		if 'username' in session:
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403

		return make_response(jsonify(response), responseCode)

	# DELETE: Logout: remove session
	#
	# Example curl command:
	# curl -i -H "Content-Type: application/json" -X DELETE -b cookie-jar -k
	#	 https://cs3103.cs.unb.ca:43075/signin

	def delete(self):
		if 'username' in session:
			session.pop('username', None)
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403

		return make_response(jsonify(response), responseCode)	

####################################################################################
#
# Users routing: GET and POST, individual user access
#
class Users(Resource):
    # GET: Return all User Resources
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k https://cs3103.cs.unb.ca:43075/users
	def get(self):
		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getUsers'
			cursor = dbConnection.cursor()
			cursor.callproc(sql) # stored procedure, no arguments
			rows = cursor.fetchall() # get all the results
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({'users': rows}), 200) # turn set into json and return it
	
	#POST: Add a user to the DB
	
	def post(self):
        #
        # Sample command line usage:
        #
        # curl -i -X POST -H "Content-Type: application/json"
        #    -d '{"Username": "tcampbe6"}' -b cookie-jar -k
        #         https://cs3103.cs.unb.ca:43075/users

		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)

		dbConnection = pymysql.connect(settings.DB_HOST,
			settings.DB_USER,
			settings.DB_PASSWD,
			settings.DB_DATABASE,
			charset='utf8mb4',
			cursorclass= pymysql.cursors.DictCursor)
		sql = "putUser"

		if not request.json or not 'Username' in request.json:
			abort(400) # bad request

		name = request.json['Username']
		try:
			cursor = dbConnection.cursor()
			sqlArgs = (name,) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			dbConnection.commit() # database was modified, commit the changes
			row = cursor.fetchone()
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		
		uri = 'http://'+settings.APP_HOST+':'+str(settings.APP_PORT)
		uri = uri+str(request.url_rule)+'/'+str(row["LAST_INSERT_ID()"])
		return make_response(jsonify( { "uri" : uri } ), 201) # successful resource creation

class User(Resource):
	# GET: Return identified user resource
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k https://cs3103.cs.unb.ca:43075/users/9
	def get(self, userId):

		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)

		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getUser'
			cursor = dbConnection.cursor()
			sqlArgs = (userId,)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			row = cursor.fetchone() # get the single result
			if row is None:
				abort(404)
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"User": row}), 200) # successful



####################################################################################
#
# pets routing: GET and POST, individual pet access
#
class Pets(Resource):	
	    # GET: Return all Pet Resources
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k http://cs3103.cs.unb.ca:43075/user/2/pets
	def get(self, userId):
		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)
		
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPetsByUser'
			sqlArgs = (userId,)
			cursor = dbConnection.cursor()
			cursor.callproc(sql, sqlArgs) # stored procedure, no arguments
			rows = cursor.fetchall() # get all the results
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({'pets': rows}), 200) # turn set into json and return it

	def post(self, userId):
        #
        # Sample command line usage:
        #
        # curl -i -X POST -H "Content-Type: application/json" -d '{"PetSpecies": "Hedgehog", "PetBreed": "Domestic", "PetName": "Hedgewig", "PetAge": "5", "userId": 3}' -b cookie-jar -k https://cs3103.cs.unb.ca:43075/users/3/pets

		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)

		dbConnection = pymysql.connect(settings.DB_HOST,
			settings.DB_USER,
			settings.DB_PASSWD,
			settings.DB_DATABASE,
			charset='utf8mb4',
			cursorclass= pymysql.cursors.DictCursor)
		sql = "putPet"

		if not request.json or not 'PetName' in request.json or not 'userId' in request.json:
			abort(400) # bad request

			# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		petSpecies = request.json['PetSpecies']
		petBreed = request.json['PetBreed']
		petName = request.json['PetName']
		petAge = request.json['PetAge']
		user = request.json['userId']

		try:
			cursor = dbConnection.cursor()
			sqlArgs = (petSpecies,petBreed,petName,petAge,user) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			dbConnection.commit() # database was modified, commit the changes
			row = cursor.fetchone()
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()

		uri = 'http://'+settings.APP_HOST+':'+str(settings.APP_PORT)
		uri = uri+str(request.url_rule)+'/'+str(row["LAST_INSERT_ID()"])
		return make_response(jsonify( { "uri" : uri } ), 201) # successful resource creation

class Pet(Resource):
	# GET: Return identified school resource
	#
	# Example request: curl http://cs3103.cs.unb.ca:43075/Pets/2
	def get(self, userId, petId):

		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)

		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPet'
			cursor = dbConnection.cursor()
			sqlArgs = (petId, userId)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			row = cursor.fetchone() # get the single result
			if row is None:
				abort(404)
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"pet": row}), 200) # successful

	# DELETE: Delete identified school resource
	#
	# Example request: curl -X DELETE http://info3103.cs.unb.ca:xxxxx/schools/2
	def delete(self, petId, userId):
		if 'username' in session:
			username = session['username']
			
		else:
			response = {'status': 'fail'}
			responseCode = 403
			return make_response(jsonify(response), responseCode)

		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'deletePet'
			cursor = dbConnection.cursor()
			sqlArgs = (petId, userId)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			dbConnection.commit()

		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
			response = {'status': 'success'}
			responseCode = 200
		return make_response(jsonify(response), responseCode) # successful


####################################################################################
#
# Identify/create endpoints and endpoint objects
#


api = Api(app)
api.add_resource(SignIn, '/signin')
api.add_resource(Users, '/users')
api.add_resource(User, '/users/<int:userId>')
api.add_resource(Pets, '/users/<int:userId>/pets')
api.add_resource(Pet, '/users/<int:userId>/pets/<int:petId>')


#############################################################################
# xxxxx= last 5 digits of your studentid. If xxxxx > 65535, subtract 30000
if __name__ == "__main__":
	context = ('cert.pem', 'key.pem') # Identify the certificates you've generated.
	app.run(
		host=settings.APP_HOST,
		port=settings.APP_PORT,
		ssl_context=context,
		debug=settings.APP_DEBUG)
