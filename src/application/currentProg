#!/usr/bin/env python3

from flask import Flask, jsonify, abort, request, make_response
from flask_restful import Resource, Api
import pymysql.cursors
import json

import cgitb
import cgi
import sys
cgitb.enable()

import settings # Our server and db settings, stored in settings.py

app = Flask(__name__, static_url_path='/static')
api = Api(app)


####################################################################################
#
# Error handlers
#
@app.errorhandler(400) # decorators to add to 400 response
def not_found(error):
	return make_response(jsonify( { "status": "Bad request" } ), 400)

@app.errorhandler(404) # decorators to add to 404 response
def not_found(error):
	return make_response(jsonify( { "status": "Resource not found" } ), 404)

####################################################################################
#
# Static Endpoints for humans
#
class Root(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('index.html')

api.add_resource(Root,'/')

class Developer(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('developer.html')

api.add_resource(Developer,'/dev')

####################################################################################
#
# pets routing: GET and POST, individual pet access
#
class Pets(Resource):
    # GET: Return all Pet Resources
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k http://cs3103.cs.unb.ca:43075/pets
	def get(self):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPets'
			cursor = dbConnection.cursor()
			cursor.callproc(sql) # stored procedure, no arguments
			rows = cursor.fetchall() # get all the results
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({'pets': rows}), 200) # turn set into json and return it

	def post(self):
        #
        # Sample command line usage:
        #
        # curl -i -X POST -H "Content-Type: application/json"
        #    -d '{"PetSpecies": "Hedgehog", "PetBreed": "Domestic", "PetName": "Hedgewig", "PetAge": "5"}'
        #         http://cs3103.cs.unb.ca:43075/pets

		dbConnection = pymysql.connect(settings.DB_HOST,
			settings.DB_USER,
			settings.DB_PASSWD,
			settings.DB_DATABASE,
			charset='utf8mb4',
			cursorclass= pymysql.cursors.DictCursor)
		sql = "putPet"

		if not request.json or not 'PetName' in request.json:
			abort(400) # bad request

			# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		petSpecies = request.json['PetSpecies']
		petBreed = request.json['PetBreed']
		petName = request.json['PetName']
		petAge = request.json['PetAge']

		try:
			cursor = dbConnection.cursor()
			sqlArgs = (petSpecies,petBreed,petName,petAge) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			dbConnection.commit() # database was modified, commit the changes
			row = cursor.fetchall()
			lastinsert = cursor.lastrowid
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		
		# Look closely, Grasshopper: we just created a new resource, so we're
		# returning the uri to it, based on the return value from the stored procedure.
		# Yes, now would be a good time check out the procedure.
		uri = 'http://'+settings.APP_HOST+':'+str(settings.APP_PORT)
		uri = uri+str(request.url_rule)+'/'+str(lastinsert)
		return make_response(jsonify( { "uri" : uri } ), 201) # successful resource creation

#        WARNING   :   Get pet by id may go under /pets endpoint. please fix if thats the case.
class Pet(Resource):
	return

api = Api(app)
api.add_resource(Pets, '/pets')
api.add_resource(Pet, '/pets/<int:petId>')


#############################################################################
# xxxxx= last 5 digits of your studentid. If xxxxx > 65535, subtract 30000
if __name__ == "__main__":
#    app.run(host="info3103.cs.unb.ca", port=xxxx, debug=True)
	app.run(host=settings.APP_HOST, port=settings.APP_PORT, debug=settings.APP_DEBUG)
