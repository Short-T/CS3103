#!/usr/bin/env python3
import imghdr
from contextlib import redirect_stdout
import sys
import os
from werkzeug.utils import secure_filename
from flask import Flask, jsonify, abort, request, make_response, session, redirect,url_for, render_template, \
	send_from_directory
from flask_restful import reqparse, Resource, Api
from flask_session import Session
import json
from ldap3 import Server, Connection, ALL
from ldap3.core.exceptions import *
import pymysql
import pymysql.cursors
import ssl #include ssl libraries

import settings # Our server and db settings, stored in settings.py

app = Flask(__name__)
#CORS(app)
# Set Server-side session config: Save sessions in the local app directory.
app.config['SECRET_KEY'] = settings.SECRET_KEY
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_COOKIE_NAME'] = 'peanutButter'
app.config['SESSION_COOKIE_DOMAIN'] = settings.APP_HOST
app.config['MAX_CONTENT_LENGTH'] = 1024 * 1024
app.config['UPLOAD_EXTENSIONS'] = ['.jpg', '.png', '.gif']
app.config['UPLOAD_PATH'] = 'upload'

Session(app)

####################################################################################
#
# Error handlers
#
@app.errorhandler(400) # decorators to add to 400 response
def not_found(error):
	return make_response(jsonify( { "status": "Bad request" } ), 400)

@app.errorhandler(404) # decorators to add to 404 response
def not_found(error):
	return make_response(jsonify( { "status": "Resource not found" }), 404)

####################################################################################
#
# Static Endpoints for humans
#
# @app.route('/')
# 
class Root(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('index.html')
	def index():
		files = os.listdir(app.config['UPLOAD_PATH'])
		return render_template('index.html', files=files)
	def validate_image(stream):
		header = stream.read(512)  # 512 bytes should be enough for a header check
		stream.seek(0)  # reset stream pointer
		format = imghdr.what(None, header)
		if not format:
			return None
		return '.' + (format if format != 'jpeg' else 'jpg')
	
	@app.route('/', methods=['POST'])
	def upload_files():
		uploaded_file = request.files['file']
		filename = secure_filename(uploaded_file.filename)
		if filename != '':
			file_ext = os.path.splitext(filename)[1]
			if file_ext not in app.config['UPLOAD_EXTENSIONS']:
				abort(400)
			uploaded_file.save(os.path.join(app.config['UPLOAD_PATH'], filename))
		return redirect(url_for('root'))

class Static(Resource):
	def upload(self, filename):
		return send_from_directory(app.config['UPLOAD_PATH'], filename)

class Developer(Resource):
   # get method. What might others be aptly named? (hint: post)
	def get(self):
		return app.send_static_file('developer.html')

#api.add_resource(Developer,'/dev')
####################################################################################
#
# Routing: GET and POST using Flask-Session
#
class SignIn(Resource):
	#
	# Set Session and return Cookie
	#
	# Example curl command:
	# curl -i -H "Content-Type: application/json" -X POST -d '{"username": "Rick", "password": "crapcrap"}'
	#  	-c cookie-jar -k https://192.168.10.4:43075/signin
	#
	def post(self):

		if not request.json:
			abort(400) # bad request

		# Parse the json
		parser = reqparse.RequestParser()
		try:
 			# Check for required attributes in json document, create a dictionary
			parser.add_argument('username', type=str, required=True)
			parser.add_argument('password', type=str, required=True)
			request_params = parser.parse_args()
		except:
			abort(400) # bad request
		if request_params['username'] in session:
			response = {'status': 'success'}
			responseCode = 200
		else:
			try:
				ldapServer = Server(host=settings.LDAP_HOST)
				ldapConnection = Connection(ldapServer,
					raise_exceptions=True,
					user='uid='+request_params['username']+', ou=People,ou=fcs,o=unb',
					password = request_params['password'])
				ldapConnection.open()
				ldapConnection.start_tls()
				ldapConnection.bind()
				# At this point we have sucessfully authenticated.

#			if request_params['username'] == 'Rick' and request_params['password'] == 'crapcrap':
#				session['username'] = request_params['username']
#				response = {'status': 'success', 'user_id':'1'}
#				responseCode = 201
#			else:
#				response = {'status': 'Access denied'}
#				responseCode = 403
#
				session['username'] = request_params['username']


				print(request_params['username'])

# Stuff in here to find the esiting userId or create a use and get the created userId

				dbConnection = pymysql.connect(
					settings.DB_HOST,
					settings.DB_USER,
					settings.DB_PASSWD,
					settings.DB_DATABASE,
					charset='utf8mb4',
					cursorclass= pymysql.cursors.DictCursor)

				sql = 'getUserByName'
				sqlArgs = (request_params['username'],)
				cursor = dbConnection.cursor()
				cursor.callproc(sql, sqlArgs) # stored procedure, no arguments
				row = cursor.fetchone() # get all the results
				cursor.close()
				userId = 1

				if row == None:
					
					sql = 'putUser'
					sqlArgs = (request_params['username'],)
					cursor = dbConnection.cursor()
					cursor.callproc(sql, sqlArgs) # stored procedure, no arguments
					dbConnection.commit()
					row = cursor.fetchone() # get all the results
					userId = row["LAST_INSERT_ID()"]
					print("in if")
					print(userId)

				else:

					userId = row['UserId']

				response = {'status': 'success', 'user_id': userId}
				responseCode = 201
			except LDAPException:
				response = {'status': 'Access denied'}
				print(response)
				responseCode = 403
			finally:
				cursor.close()
				dbConnection.close()
				ldapConnection.unbind()

		return make_response(jsonify(response), responseCode)

	# GET: Check Cookie data with Session data
	#
	# Example curl command:
	# curl -i -H "Content-Type: application/json" -X GET
	#	-b cookie-jar -k https://192.168.10.4:61340/signin
	def get(self):
		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403

		return make_response(jsonify(response), responseCode)
	
	def delete(self):
		if 'username' in session:
			session.clear()

		# return redirect_stdout('/')	

####################################################################################
#
# schools routing: GET and POST, individual school access
####################################################################################
#
# pets routing: GET and POST, individual pet access
#
class Pets(Resource):
    # GET: Return all Pet Resources
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k http://cs3103.cs.unb.ca:43075/pets
	def get(self):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPets'
			cursor = dbConnection.cursor()
			cursor.callproc(sql) # stored procedure, no arguments
			rows = cursor.fetchall() # get all the results
			cursor.close()
			dbConnection.close()
		except:
			abort(500) # Nondescript server error
		# finally:
			
		return make_response(jsonify({'pets': rows}), 200) # turn set into json and return it
	
	def post(self):
		#
		# Sample command line usage:
		#
		# curl -i -X POST -H "Content-Type: application/json"
		#    -d '{"PetSpecies": "Hedgehog", "PetBreed": "Domestic", "PetName": "Hedgewig", "PetAge": "5"}'
		#         http://192.168.10.4:43075/pets
		

		if 'username' in session:
			username = session['username']
			response = {'status': 'success'}
			responseCode = 200
		else:
			response = {'status': 'fail'}
			responseCode = 403
		if not request.json or not 'Name' in request.json:
			abort(400) # bad request

		# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		petSpecies = request.json['PetSpecies']
		petBreed = request.json['PetBreed']
		petName = request.json['PetName']
		petAge = request.json['PetAge']
		userId = request.json['UserId']

		try:
			dbConnection = pymysql.connect(settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'putPet'
			cursor = dbConnection.cursor()
			sqlArgs = (petSpecies, petBreed, petName, petAge, userId) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			dbConnection.commit() # database was modified, commit the changes
			row = cursor.fetchone()
			
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()


		response = {'status': 'success', 'user_id': userId}
		responseCode = 201
		return make_response(jsonify(response), responseCode) # successful resource creation
	

class Pet(Resource):
	# GET: Return identified school resource
	#
	# Example request: curl http://cs3103.cs.unb.ca:43075/Pets/2
	def get(self, PetId):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DB,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPet'
			cursor = dbConnection.cursor()
			sqlArgs = (PetId,)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			row = cursor.fetchone() # get the single result
			if row is None:
				abort(404)
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"pet": row}), 200) # successful

	# DELETE: Delete identified school resource
	#
	# Example request: curl -X DELETE http://info3103.cs.unb.ca:xxxxx/schools/2
	def delete(self, petId):
		print("PetId to delete: "+str(petId))
		# 1. You need to create the stored procedure in MySQLdb (deleteSchool)
		# 2. You need to write the code here to call the stored procedure
		# 3. What should/could the response code be? How to return it?
		# 4. Anytime you change a database, you ned to commit that change.
		#       See the POST example for more

		if not request.json or not 'PetName' in request.json:
			abort(400) # bad request

			# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		petSpecies = request.json['PetSpecies']
		petBreed = request.json['PetBreed']
		petName = request.json['PetName']
		petAge = request.json['PetAge']

		try:
			dbConnection = pymysql.connect(settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'deletePet'
			cursor = dbConnection.cursor()
			sqlArgs = (petSpecies, petId) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			row = cursor.fetchone()
			dbConnection.commit() # database was modified, commit the changes
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		# Look closely, Grasshopper: we just created a new resource, so we're
		# returning the uri to it, based on the return value from the stored procedure.
		# Yes, now would be a good time check out the procedure.
		uri = 'http://'+settings.APP_HOST+':'+str(settings.APP_PORT)
		uri = uri+str(request.url_rule)+'/'+str(row['LAST_INSERT_ID()'])
		return make_response(jsonify( { "uri" : uri } ), 201) # successful resource creation

class Posts(Resource):
	# GET: Return identified post
	#
	# Example request: curl http://cs3103.cs.unb.ca:43075/pets/PetPet/posts/15
	def get(self, postId, petId):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getPost'
			cursor = dbConnection.cursor()
			sqlArgs = (petId,postId)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			row = cursor.fetchone() # get the single result
			if row is None:
				abort(404)
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"post": row}), 200) # successful

	# POST: Return identified post
	#
	# Example request: curl http://cs3103.cs.unb.ca:43075/pets/PetPet/posts/	
	def post(self):
		#
		# Sample command line usage:
		#
		# curl -i -X POST -H "Content-Type: application/json"
		#    -d '{"petId": "15", "postImage": "162171", "caption":
		#		  "Just a few cuties"}'
		#         http://info3103.cs.unb.ca:xxxxx/pets/petid/posts

		if not request.json or not 'imageId' in request.json:
			abort(400) # bad request

			# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		petId = request.json['petId']
		postImage = request.json['imageId']
		postCaption = request.json['caption']

		try:
			dbConnection = pymysql.connect(settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'putPost'
			cursor = dbConnection.cursor()
			sqlArgs = (petId,postImage,postCaption) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			row = cursor.fetchone()
			dbConnection.commit() # database was modified, commit the changes
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		# Look closely, Grasshopper: we just created a new resource, so we're
		# returning the uri to it, based on the return value from the stored procedure.
		# Yes, now would be a good time check out the procedure.
		uri = 'http://'+settings.APP_HOST+':'+str(settings.APP_PORT)
		uri = uri+str(request.url_rule)+'/'+str(row['LAST_INSERT_ID()'])
		return make_response(jsonify( { "uri" : uri } ), 201) # successful resource creation
	# DELETE: Delete identified post resource
	#
	# Example request: curl -X DELETE http://info3103.cs.unb.ca:xxxxx/pets/petpet/posts/15
	def delete(self, petId, postId):
		print("PostId to delete: "+str(postId))
		if not request.json or not 'postId' in request.json:
			abort(400) # bad request

			# The request object holds the ... wait for it ... client request!
		# Pull the results out of the json request
		postId = request.json['postId']

		try:
			dbConnection = pymysql.connect(settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'deletePost'
			cursor = dbConnection.cursor()
			sqlArgs = (postId,) # Must be a collection
			cursor.callproc(sql,sqlArgs) # stored procedure, with arguments
			row = cursor.fetchone()
			dbConnection.commit() # database was modified, commit the changes
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		#return response for successful deletion
		return make_response(jsonify( { "deletedId" : postId } ), 204) # successful resource deletion
####################################################################################
#
# Identify/create endpoints and endpoint objects
#
class Image(Resource):
	def get(self, imageId):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getImage'
			cursor = dbConnection.cursor()
			sqlArgs = (imageId,)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			row = cursor.fetchone() # get the single result
			if row is None:
				abort(404)
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"pet": row}), 200) # successful

class Images(Resource):
		# GET: Return all Pet Resources
	#
	# Example request: curl -i -H "Content-Type: application/json" -X GET
	# -b cookie-jar -k https://cs3103.cs.unb.ca:43075/images
	def get(self):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getImages'
			cursor = dbConnection.cursor()
			cursor.callproc(sql) # stored procedure, no arguments
			rows = cursor.fetchall() # get all the results
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({'images': rows}), 200) # turn set into json and return it

	def getByPet(self, petId):
		try:
			dbConnection = pymysql.connect(
				settings.DB_HOST,
				settings.DB_USER,
				settings.DB_PASSWD,
				settings.DB_DATABASE,
				charset='utf8mb4',
				cursorclass= pymysql.cursors.DictCursor)
			sql = 'getImagesByPet'
			cursor = dbConnection.cursor()
			sqlArgs = (petId,)
			cursor.callproc(sql,sqlArgs) # stored procedure, no arguments
			rows = cursor.fetchall() # get the single result
		except:
			abort(500) # Nondescript server error
		finally:
			cursor.close()
			dbConnection.close()
		return make_response(jsonify({"pet": rows}), 200) # successful


api = Api(app)
api.add_resource(Root,'/')
api.add_resource(Developer,'/dev')
api.add_resource(SignIn, '/signin')
api.add_resource(Pets, '/pets')
api.add_resource(Pet, '/pets/<int:petId>')
api.add_resource(Images, '/pets/<int:petId>/images')
api.add_resource(Image, '/pets/<int:petId>/images/<int:imageId>')
api.add_resource(Posts, '/pets/<int:petId>/posts')
#api.add_resource(Post, '/pets/<int:petId>/posts/<int:postId>')

#############################################################################
# xxxxx= last 5 digits of your studentid. If xxxxx > 65535, subtract 30000
if __name__ == "__main__":
#    app.run(host="cs3103.cs.unb.ca", port=xxxx, debug=True)
	context = ('cert.pem', 'key.pem')
	app.run(host=settings.APP_HOST, port=settings.APP_PORT, ssl_context = context, debug=settings.APP_DEBUG)ings.APP_DEBUG)
